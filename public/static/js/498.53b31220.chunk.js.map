{"version":3,"file":"static/js/498.53b31220.chunk.js","mappings":"2KACA,MAAwC,4CAAxC,EAAyG,yCAAzG,EAA4J,8BAA5J,EAAuM,iC,uCC6BvM,EAxBqB,SAAAA,GAEjB,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MAQXC,EAASL,EAAMK,QAAUJ,EAAE,gBAEjC,OAAO,iBAAKK,UAAWC,EAAhB,WACH,mCACA,wBAAKF,KACL,iBAAKC,UAAWC,EAAhB,WACI,SAACC,EAAA,EAAD,CAAaF,UAAWC,EAAiBE,QAb9B,WACfT,EAAMU,gBAYF,SAA+DT,EAAE,aACjE,SAACO,EAAA,EAAD,CAAaF,UAAWC,EAAoBE,QAXpC,WACZN,EAAS,MAUL,0B,sJCvBZ,EAAuC,0CAAvC,EAAoG,sCAApG,EAAuJ,gCAAvJ,EAAuM,mCAAvM,EAAyP,kCAAzP,EAA2S,mCAA3S,EAA6V,kCAA7V,EAAkZ,sC,oECsHlZ,EA1GqB,WAEjB,IAgDIQ,EAhDIV,GAAMC,EAAAA,EAAAA,KAAND,EACFW,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC3B,GAAsDC,EAAAA,EAAAA,KAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,GAIIC,EAAAA,EAAAA,IAAQ,CACRC,KAAM,aAJNC,EADJ,EACIA,SACaC,EAFjB,EAEIC,UAAaD,OACbE,EAHJ,EAGIA,aAMEtB,GAAWC,EAAAA,EAAAA,MAEXsB,EAAQ,yCAAG,WAAOC,GAAP,uFACbR,IACMS,GAAUC,EAAAA,EAAAA,GAAYjB,EAAQkB,MAAOlB,EAAQmB,SAC7CC,EAAgB,IAAIC,gBAHb,SAKHC,EAAW,CACbC,MAAOR,EAAKQ,OANP,SASHjB,EAAYkB,2DACdJ,EACA,OACAK,KAAKC,UAAUJ,GACfN,GAbK,OAsBTzB,EAAS,IAAD,OAAKoC,EAAAA,EAAAA,UAAL,YAAsBA,EAAAA,EAAAA,gBAtBrB,4GAAH,sDA6Bd,GAAIvB,EACA,OAAO,SAACwB,EAAA,EAAD,IAIPvB,IACAN,EAAM0B,KAAKI,MAAMxB,IAOrB,GAAIN,GAAOA,EAAI+B,cACX,OAAO,SAACC,EAAA,QAAD,CAAcjC,aALC,WACtBS,OAYJ,OAAO,gBAAKb,UAAWC,EAAhB,UAEH,kBAAMD,UAAWC,EAA0BmB,SAAUD,EAAaC,GAAlE,WAEI,gBAAKpB,UAAWC,EAAhB,UACI,wBAAKN,EAAE,uBAEX,iBAAKK,UAAWC,EAAhB,WACI,2BAAQN,EAAE,YACV,4BACQqB,EAAS,QAAS,CAClBsB,SAAU3C,EAAE,iBACZ4C,UAAW,CACPC,MAAO,EACPC,QAAS9C,EAAE,qBAEf+C,UAAW,CACPF,MAAO,GACPC,QAAS9C,EAAE,yBAItBsB,EAAOY,QACJ,cAAG7B,UAAWC,EAAd,SAAqCgB,EAAOY,MAAMY,UAErDpC,GAAOA,EAAIwB,QAAS,uBAAIxB,EAAIwB,YAGjC,iBAAK7B,UAAWC,EAAhB,WACI,SAACC,EAAA,EAAD,CAAaF,UAAWC,EAAsB0C,KAAK,SAAnD,SAA6DhD,EAAE,WAC/D,SAACO,EAAA,EAAD,CAAaF,UAAWC,EAA0BE,QAnCnC,SAAAyC,GACvBA,EAAMC,iBACNhD,EAAS,IAAD,OAAKoC,EAAAA,EAAAA,UAAL,YAAsBA,EAAAA,EAAAA,iBAiCtB,SAAgFtC,EAAE","sources":["webpack://envelope-frontend/./src/components/ui/GenericError.module.css?a5cf","components/ui/GenericError.js","webpack://envelope-frontend/./src/envelopes/pages/AddEnvelope.module.css?325b","envelopes/pages/AddEnvelopes.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"genericErrorContainer\":\"GenericError_genericErrorContainer__H4PWg\",\"genericErrorAction\":\"GenericError_genericErrorAction__Oibjj\",\"backBtn\":\"GenericError_backBtn__e8Pm1\",\"homeButton\":\"GenericError_homeButton__E1GvU\"};","import classes from './GenericError.module.css';\r\nimport {useNavigate} from 'react-router-dom'\r\nimport ButtonRound from './ButtonRound';\r\nimport { useTranslation } from 'react-i18next'\r\n\r\n\r\nconst GenericError = props => {\r\n\r\n    const { t } = useTranslation()\r\n    const navigate = useNavigate()\r\n    const clearError = () => {\r\n        props.onClearError()\r\n    }\r\n    const backHome =() => {\r\n        navigate('/')\r\n    }\r\n\r\n    const errMsg = props.errMsg || t('genericError')\r\n\r\n    return <div className={classes.genericErrorContainer}>\r\n        <h1>OOPS!</h1>\r\n        <h2>{errMsg}</h2>\r\n        <div className={classes.genericErrorAction}>\r\n            <ButtonRound className={classes.backBtn} onClick={clearError}>{t('goBack')}</ButtonRound>\r\n            <ButtonRound className={classes.homeButton} onClick={backHome}>Home</ButtonRound>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default GenericError","// extracted by mini-css-extract-plugin\nexport default {\"addEnvelopeContainer\":\"AddEnvelope_addEnvelopeContainer__ladRY\",\"addFormContainer\":\"AddEnvelope_addFormContainer__iL+K+\",\"addFormTag\":\"AddEnvelope_addFormTag__cDl7-\",\"addFormInputs\":\"AddEnvelope_addFormInputs__DzRe5\",\"errorMessage\":\"AddEnvelope_errorMessage__PapVK\",\"addFormAction\":\"AddEnvelope_addFormAction__nuH1P\",\"addFormBtnOk\":\"AddEnvelope_addFormBtnOk__p1lpb\",\"addFormBtnCancel\":\"AddEnvelope_addFormBtnCancel__Rif5u\"};","import { useContext } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useHttpClient } from '../../shared/hooks/http-hook'\r\nimport { AuthContext } from '../../shared/context/auth-context'\r\nimport classes from './AddEnvelope.module.css'\r\nimport { url } from '../../utils/urls/urls'\r\nimport LoaderSpinner from '../../components/ui/LoaderSpinner'\r\nimport ButtonRound from '../../components/ui/ButtonRound'\r\nimport { useTranslation } from 'react-i18next'\r\nimport GenericError from '../../components/ui/GenericError'\r\nimport { authHeaders } from '../../utils/headers/authHeader'\r\n\r\nconst AddEnvelopes = () => {\r\n\r\n    const { t } = useTranslation()\r\n    const authCtx = useContext(AuthContext)\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        handleSubmit\r\n    } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onSubmit = async (data) => {\r\n        clearError()\r\n        const headers = authHeaders(authCtx.token, authCtx.csurfTk)\r\n        const httpAbortCtrl = new AbortController()\r\n        try {\r\n            const userData = {\r\n                title: data.title,\r\n            }\r\n\r\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + '/envelopes',\r\n                httpAbortCtrl,\r\n                'POST',\r\n                JSON.stringify(userData),\r\n                headers\r\n                /* {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + authCtx.token,\r\n                    'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                    credentials: 'include'\r\n                } */\r\n            )\r\n\r\n            navigate(`/${url.envelopes}/${url.userEnvelopes}`)\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    let err;\r\n    if (error) {\r\n        err = JSON.parse(error)\r\n    }\r\n\r\n    const clearErrorHandler = () => {\r\n        clearError()\r\n    }\r\n\r\n    if (err && err.serverMessage) {\r\n        return <GenericError onClearError={clearErrorHandler} />\r\n    }\r\n\r\n    const onCancelSubmission = event => {\r\n        event.preventDefault()\r\n        navigate(`/${url.envelopes}/${url.userEnvelopes}`)\r\n    }\r\n\r\n    return <div className={classes.addEnvelopeContainer}>\r\n\r\n        <form className={classes.addFormContainer} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <div className={classes.addFormTag}>\r\n                <h1>{t('createEnvelope')}</h1>\r\n            </div>\r\n            <div className={classes.addFormInputs}>\r\n                <label>{t('title')}</label>\r\n                <input\r\n                    {...register(\"title\", {\r\n                        required: t('fieldNotEmpty'),\r\n                        minLength: {\r\n                            value: 2,\r\n                            message: t('titleFieldMaxMin')\r\n                        },\r\n                        maxLength: {\r\n                            value: 14,\r\n                            message: t('titleFieldMaxMin')\r\n                        },\r\n                    })}\r\n                />\r\n                {errors.title && (\r\n                    <p className={classes.errorMessage}>{errors.title.message}</p>\r\n                )}\r\n                {err && err.title && <p>{err.title}</p>}\r\n            </div>\r\n\r\n            <div className={classes.addFormAction}>\r\n                <ButtonRound className={classes.addFormBtnOk} type=\"submit\">{t('send')}</ButtonRound>\r\n                <ButtonRound className={classes.addFormBtnCancel} onClick={onCancelSubmission}>{t('cancel')}</ButtonRound>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n\r\n}\r\n\r\nexport default AddEnvelopes"],"names":["props","t","useTranslation","navigate","useNavigate","errMsg","className","classes","ButtonRound","onClick","onClearError","err","authCtx","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","mode","register","errors","formState","handleSubmit","onSubmit","data","headers","authHeaders","token","csurfTk","httpAbortCtrl","AbortController","userData","title","process","JSON","stringify","url","LoaderSpinner","parse","serverMessage","GenericError","required","minLength","value","message","maxLength","type","event","preventDefault"],"sourceRoot":""}