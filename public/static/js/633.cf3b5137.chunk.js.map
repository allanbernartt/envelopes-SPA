{"version":3,"file":"static/js/633.cf3b5137.chunk.js","mappings":"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","sources":["users/pages/auth/PasswordReset.js","webpack://envelope-frontend/./src/users/pages/auth/PasswordReset.module.css?1aa1"],"sourcesContent":["import { useState, useEffect, useContext } from 'react'\r\nimport { NavLink, useParams } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useHttpClient } from '../../../shared/hooks/http-hook'\r\nimport { url } from '../../../utils/urls/urls'\r\nimport { useForm } from 'react-hook-form'\r\nimport classes from './PasswordReset.module.css'\r\nimport LoaderSpinner from '../../../components/ui/LoaderSpinner'\r\nimport ButtonRound from '../../../components/ui/ButtonRound'\r\nimport { AuthContext } from '../../../shared/context/auth-context'\r\nimport { authHeaders } from '../../../utils/headers/authHeader'\r\n\r\nconst PasswordReset = () => {\r\n\r\n    const authCtx = useContext(AuthContext)\r\n\r\n    const { t } = useTranslation()\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n    const [isResponseOk, setIsResponseOk] = useState(false)\r\n    const [isPassReset, setIsPassReset] = useState(false)\r\n    const activationToken = useParams().token\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        getValues,\r\n        handleSubmit\r\n    } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        const httpAbortCtrl = new AbortController()\r\n        const fetchUsers = async () => {\r\n\r\n            try {\r\n                await sendRequest(process.env.REACT_APP_BACKEND_URL + `/users/user-password-reset/${activationToken}`, httpAbortCtrl);\r\n\r\n                setIsResponseOk(true)\r\n\r\n            } catch (err) { }\r\n        }\r\n        fetchUsers()\r\n\r\n    }, [sendRequest, activationToken])\r\n\r\n    const onSubmit = async (data) => {\r\n        const headers = authHeaders(null, authCtx.csurfTk)\r\n        clearError()\r\n        const httpAbortCtrl = new AbortController()\r\n        try {\r\n            const userData = {\r\n                new_password: data.new_password,\r\n                newPassConfirmation: data.newPassConfirmation\r\n            }\r\n\r\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + `/users/user-password-reset/${activationToken}`,\r\n                httpAbortCtrl,\r\n                'POST',\r\n                JSON.stringify(userData),\r\n                headers\r\n                /* {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                    credentials: 'include'\r\n                } */\r\n            )\r\n            setIsPassReset(true)\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    let err;\r\n    if (error) {\r\n        err = JSON.parse(error)\r\n    }\r\n\r\n    if (err && err.serverMessage) {\r\n        return <div className={classes.invalidContainer}>\r\n            <p>{err.serverMessage}</p>\r\n            <NavLink to={`/${url.users}/${url.account}/${url.sendEmail}?requestType=password`}>Try again?</NavLink>\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n    if (isPassReset) {\r\n        return <div className={classes.successMessage}>\r\n            <h1>{t('passResetSuccess')}</h1>\r\n            <h2>{t('loginWithNewPass')}</h2>\r\n            <NavLink to={`/${url.users}/${url.auth}`}>Login</NavLink>\r\n        </div>\r\n    }\r\n\r\n\r\n    if (!isLoading && isResponseOk) {\r\n        return <div className={classes.generalFormContainer}>\r\n            <form className={classes.generalForm} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <label>Password: </label>\r\n                <input\r\n                    {...register(\"new_password\", {\r\n                        required: t('fieldNotEmpty'),\r\n                        minLength: {\r\n                            value: 8,\r\n                            message: t('passFieldMaxMin')\r\n                        },\r\n                        maxLength: {\r\n                            value: 25,\r\n                            message: t('passFieldMaxMin')\r\n                        },\r\n                    })}\r\n                />\r\n                {errors.new_password && (\r\n                    <p className={classes.errorMessage}>{errors.new_password.message}</p>\r\n                )}\r\n                {err && err.new_password && <p className={classes.errorMessage}>{err.new_password}</p>}\r\n\r\n                <label>Confirm Password: </label>\r\n                <input\r\n                    {...register(\"newPassConfirmation\", {\r\n                        required: t('fieldNotEmpty'),\r\n                        validate: {\r\n                            matchesPreviousPassword: (value) => {\r\n                                const { new_password } = getValues();\r\n                                return new_password === value || t('passMatchField');\r\n                            }\r\n                        }\r\n                    })}\r\n                />\r\n                {errors.newPassConfirmation && (\r\n                    <p className={classes.errorMessage}>\r\n                        {errors.newPassConfirmation.message}\r\n                    </p>\r\n                )}\r\n                {err && err.newPassConfirmation && <p>{err.newPassConfirmation}</p>}\r\n\r\n                <div className={classes.formAction}>\r\n                    <ButtonRound className={classes.formActionBtn} type=\"submit\">{t('send')}</ButtonRound>\r\n                </div>\r\n\r\n            </form>\r\n            {err && err.serverMessage && <p className={classes.errorMessage}>{err.serverMessage}</p>}\r\n\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default PasswordReset\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"invalidContainer\":\"PasswordReset_invalidContainer__ZPlWc\",\"generalFormContainer\":\"PasswordReset_generalFormContainer__-FE0K\",\"generalForm\":\"PasswordReset_generalForm__uUORo\",\"errorMessage\":\"PasswordReset_errorMessage__+9VRc\",\"formAction\":\"PasswordReset_formAction__1SnTe\",\"formActionBtn\":\"PasswordReset_formActionBtn__2DRxD\",\"successMessage\":\"PasswordReset_successMessage__L+2ri\"};"],"names":["authCtx","useContext","AuthContext","t","useTranslation","useHttpClient","isLoading","error","sendRequest","clearError","useState","isResponseOk","setIsResponseOk","isPassReset","setIsPassReset","activationToken","useParams","token","useForm","mode","register","errors","formState","getValues","handleSubmit","useEffect","httpAbortCtrl","AbortController","fetchUsers","process","err","onSubmit","data","headers","authHeaders","csurfTk","userData","new_password","newPassConfirmation","JSON","stringify","parse","serverMessage","className","classes","to","url","required","minLength","value","message","maxLength","validate","matchesPreviousPassword","type"],"sourceRoot":""}