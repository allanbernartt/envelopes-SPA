{"version":3,"file":"static/js/35.a6272a94.chunk.js","mappings":"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","sources":["webpack://envelope-frontend/./src/components/ui/ErrorCard.module.css?1580","components/ui/ErrorCard.js","webpack://envelope-frontend/./src/envelopes/pages/EnvelopeTransfer.module.css?7619","envelopes/pages/EnvelopeTransfer.js","utils/i18n/currencyMask.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorCard\":\"ErrorCard_errorCard__JwCDV\"};","import classes from './ErrorCard.module.css'\r\n\r\nconst ErrorCard = props => {\r\n    return <div className={classes.errorCard}>\r\n        {props.children}\r\n    </div>\r\n}\r\n\r\nexport default ErrorCard","// extracted by mini-css-extract-plugin\nexport default {\"transferContainer\":\"EnvelopeTransfer_transferContainer__zpyuH\",\"transferTitle\":\"EnvelopeTransfer_transferTitle__gnFNG\",\"transferSourceContainer\":\"EnvelopeTransfer_transferSourceContainer__KG+jF\",\"destinationContainer\":\"EnvelopeTransfer_destinationContainer__kvwT1\",\"formTransfer\":\"EnvelopeTransfer_formTransfer__zWHan\",\"inputSection\":\"EnvelopeTransfer_inputSection__xUiuU\",\"transferContainerAction\":\"EnvelopeTransfer_transferContainerAction__KGrbe\",\"btnOk\":\"EnvelopeTransfer_btnOk__QQBNz\",\"btnCancel\":\"EnvelopeTransfer_btnCancel__KpR5u\",\"errorMessage\":\"EnvelopeTransfer_errorMessage__d0rTf\",\"errorMessageBtn\":\"EnvelopeTransfer_errorMessageBtn__O0vcj\",\"errorWrapper\":\"EnvelopeTransfer_errorWrapper__IV7-+\"};","import { useContext, useEffect, useState } from \"react\"\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\nimport { useForm } from 'react-hook-form'\r\nimport { AuthContext } from \"../../shared/context/auth-context\"\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\r\nimport { url } from '../../utils/urls/urls'\r\nimport LoaderSpinner from \"../../components/ui/LoaderSpinner\"\r\nimport classes from './EnvelopeTransfer.module.css'\r\nimport ButtonRound from '../../components/ui/ButtonRound'\r\nimport ErrorCard from \"../../components/ui/ErrorCard\"\r\nimport { useTranslation } from 'react-i18next'\r\nimport {currencyMask} from '../../utils/i18n/currencyMask'\r\n\r\n\r\nconst EnvelopeTransfer = () => {\r\n\r\n    const { t, i18n } = useTranslation()\r\n    const authCtx = useContext(AuthContext)\r\n\r\n    const { isLoading, error, sendRequest } = useHttpClient()\r\n    const [sourceEnvelope, setSourceEnvelope] = useState()\r\n    const [destinationArray, setDestinationArray] = useState()\r\n    const [insufficientFunds, setInsufficientFunds] = useState(false)\r\n\r\n    const envelopeId = useParams().envelopeId\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const {\r\n        register,\r\n        handleSubmit\r\n    } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        const httpAbortCtrl = new AbortController()\r\n        try {\r\n            const fetchEnvelopeById = async () => {\r\n\r\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `/transactions/${envelopeId}/transfer`, httpAbortCtrl, 'GET', null, {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + authCtx.token\r\n                })\r\n\r\n                setSourceEnvelope(responseData.sourceEnvelope)\r\n                setDestinationArray(responseData.destinationEnvelopesArray)\r\n            }\r\n\r\n            fetchEnvelopeById()\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n\r\n    }, [sendRequest, authCtx.token, envelopeId])\r\n\r\n    const goBack = (event) => {\r\n        event.preventDefault()\r\n        navigate(-1)\r\n    }\r\n\r\n    let err;\r\n\r\n    if (error) {\r\n        \r\n        err = JSON.parse(error)\r\n\r\n        return <div className={classes.errorWrapper}>\r\n            <ErrorCard>\r\n                <h2>{err.serverMessage || err.budget || err.insufficientFunds || t('genericError')}</h2>\r\n                <ButtonRound onClick={goBack}>{t('goBack')}</ButtonRound>\r\n            </ErrorCard>\r\n        </div>\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    const onSubmit = async (data) => {\r\n\r\n        const valueFloat = parseFloat(data.budget)\r\n        const maxAllowed = parseFloat(sourceEnvelope.budget)\r\n\r\n        if (valueFloat >= maxAllowed) {\r\n            setInsufficientFunds(true)\r\n            return\r\n        }\r\n\r\n        const normalized = i18n.language === 'pt' ? data.budget.replaceAll('.', '') : data.budget.replaceAll(',', '');\r\n            const budget = i18n.language === 'pt' ? normalized.replace(',', '.') : parseFloat(normalized)\r\n        const sendData = {\r\n            destinationId: data.destinationId,\r\n            budget: budget\r\n        }\r\n\r\n        try {\r\n            const httpAbortCtrl = new AbortController()\r\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + `/transactions/${sourceEnvelope.env_id}/transfer`,\r\n                httpAbortCtrl,\r\n                'POST',\r\n                JSON.stringify(sendData),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + authCtx.token,\r\n                    'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                    credentials: 'include'\r\n                }\r\n            )\r\n\r\n            navigate(`/${url.envelopes}/${url.userEnvelopes}`)\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const inputMask = () => {\r\n\r\n        let element = document.getElementById('valor')\r\n\r\n        let valor = element.value.replace(/[^\\d]+/gi, '');\r\n        let reversedValue = valor.split('').reverse().join('')\r\n        let resultado = \"\";\r\n        let mascara = i18n.language === 'pt' ? \"##.###.###,##\".split('').reverse().join('') : \"##,###,###.##\".split('').reverse().join('');\r\n        for (let x = 0, y = 0; x < mascara.length && y < reversedValue.length;) {\r\n            if (mascara.charAt(x) !== '#') {\r\n                resultado += mascara.charAt(x);\r\n                x++;\r\n            } else {\r\n                resultado += reversedValue.charAt(y);\r\n                y++;\r\n                x++;\r\n            }\r\n        }\r\n        element.value = resultado.split('').reverse().join('');\r\n    }\r\n\r\n    const clearInsufficientFundsError = (event) => {\r\n        event.preventDefault()\r\n        setInsufficientFunds(false)\r\n    }\r\n\r\n    if (sourceEnvelope && destinationArray) {\r\n        const sourceBudget = currencyMask(sourceEnvelope.budget, i18n.language)\r\n\r\n        const destination = destinationArray.map(dest => {\r\n            const destinationBudget = currencyMask(dest.budget, i18n.language)\r\n\r\n            return <option key={dest.env_id} value={dest.env_id}>{`${dest.title}: ${destinationBudget}`}</option>\r\n        })\r\n\r\n        return <div className={classes.transferContainer}>\r\n\r\n            <div className={classes.transferTitle}>\r\n                <h1>{t('transfer')}</h1>\r\n            </div>\r\n\r\n            <div className={classes.transferSourceContainer}>\r\n\r\n                <div>\r\n                    <h2>{t('source')}</h2>\r\n                    <h3>{sourceEnvelope.title}</h3>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>{t('availableFunds')}</h2>\r\n                    <h3>{sourceBudget}</h3>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.destinationContainer}>\r\n                <h2>{t('envelopeDestination')}</h2>\r\n                <form onSubmit={handleSubmit(onSubmit)} className={classes.formTransfer}>\r\n                    <label>{t('chooseDestination')}</label>\r\n                    <select name=\"Envelope Destination\" {...register(\"destinationId\", { required: true })}>\r\n                        {destination}\r\n                    </select>\r\n\r\n                    <div className={classes.inputSection}>\r\n                        <p>{t('currency')}</p>\r\n                        <input\r\n                            id=\"valor\" onKeyUp={inputMask}\r\n                            placeholder={t('amountToTransfer')}\r\n                            {...register(\"budget\", {\r\n                                required: t('fieldNotEmpty')\r\n                            })}\r\n                        />\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className={classes.transferContainerAction}>\r\n                        <ButtonRound className={classes.btnOk}>{t('send')}</ButtonRound>\r\n                        <ButtonRound className={classes.btnCancel} onClick={goBack}>{t('cancel')}</ButtonRound>\r\n                    </div>\r\n\r\n                </form>\r\n                {insufficientFunds && <>\r\n                    <p className={classes.errorMessage}>{t('sourceInsufficientFunds')}</p>\r\n                    <ButtonRound className={classes.errorMessageBtn} onClick={clearInsufficientFundsError}>Ok</ButtonRound>\r\n                </>}\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default EnvelopeTransfer","export const currencyMask = (data, lng) => {\r\n   \r\n    let currency;\r\n    if(lng === 'pt') {\r\n        currency = Intl.NumberFormat('pt-BR', {\r\n            style: 'currency',\r\n            currency: 'BRL',\r\n            minimumFractionDigits: 2\r\n        })\r\n    } else {\r\n        currency = Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 2           \r\n        })\r\n    }\r\n\r\n    const localCurrency = currency.format(data)\r\n    \r\n    return localCurrency\r\n}"],"names":["props","className","classes","children","useTranslation","t","i18n","authCtx","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","useState","sourceEnvelope","setSourceEnvelope","destinationArray","setDestinationArray","insufficientFunds","setInsufficientFunds","envelopeId","useParams","navigate","useNavigate","useForm","mode","register","handleSubmit","useEffect","httpAbortCtrl","AbortController","fetchEnvelopeById","process","Authorization","token","responseData","destinationEnvelopesArray","err","goBack","event","preventDefault","JSON","parse","ErrorCard","serverMessage","budget","ButtonRound","onClick","LoaderSpinner","onSubmit","data","valueFloat","parseFloat","maxAllowed","normalized","language","replaceAll","replace","sendData","destinationId","env_id","stringify","csurfTk","credentials","url","sourceBudget","currencyMask","destination","map","dest","destinationBudget","value","title","name","required","id","onKeyUp","element","document","getElementById","reversedValue","split","reverse","join","resultado","mascara","x","y","length","charAt","placeholder","lng","Intl","NumberFormat","style","currency","minimumFractionDigits","format"],"sourceRoot":""}