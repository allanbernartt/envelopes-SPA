{"version":3,"file":"static/js/873.6c076fa3.chunk.js","mappings":"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","sources":["webpack://envelope-frontend/./src/components/transfer/EnvelopeTransactions.module.css?f6df","components/transfer/EnvelopeTransactions.js","webpack://envelope-frontend/./src/components/ui/ErrorCard.module.css?1580","components/ui/ErrorCard.js","webpack://envelope-frontend/./src/components/ui/GenericError.module.css?a5cf","components/ui/GenericError.js","webpack://envelope-frontend/./src/envelopes/pages/SingleEnvelope.module.css?766d","envelopes/pages/SingleEnvelope.js","utils/i18n/currencyMask.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backDrop\":\"EnvelopeTransactions_backDrop__AYXZ+\",\"formContainer\":\"EnvelopeTransactions_formContainer__3pw--\",\"bounceIn\":\"EnvelopeTransactions_bounceIn__gtSTU\",\"form\":\"EnvelopeTransactions_form__bBurX\",\"formTag\":\"EnvelopeTransactions_formTag__mJobT\",\"inputContainer\":\"EnvelopeTransactions_inputContainer__aNfe2\",\"inputCurrency\":\"EnvelopeTransactions_inputCurrency__h1b92\",\"formInputs\":\"EnvelopeTransactions_formInputs__zEp4s\",\"errorMessage\":\"EnvelopeTransactions_errorMessage__HVK9q\",\"formAction\":\"EnvelopeTransactions_formAction__7rI7n\",\"buttonOK\":\"EnvelopeTransactions_buttonOK__ndOIP\",\"buttonCancel\":\"EnvelopeTransactions_buttonCancel__XWcfW\",\"buttonError\":\"EnvelopeTransactions_buttonError__+Beh1\"};","import { useHttpClient } from \"../../shared/hooks/http-hook\"\r\nimport { useForm } from 'react-hook-form'\r\nimport { useContext, useState } from \"react\"\r\nimport LoaderSpinner from \"../ui/LoaderSpinner\"\r\nimport classes from './EnvelopeTransactions.module.css'\r\nimport ButtonRound from \"../ui/ButtonRound\"\r\nimport { useTranslation } from 'react-i18next'\r\nimport { AuthContext } from \"../../shared/context/auth-context\"\r\nimport {authHeaders} from '../../utils/headers/authHeader'\r\n\r\nconst EnvelopeTransactions = (props) => {\r\n    const authCtx = useContext(AuthContext)\r\n    const { t, i18n } = useTranslation()\r\n    const { isLoading, error, sendRequest } = useHttpClient()\r\n    const [insufficientFunds, setInsufficientFunds] = useState(false)\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        handleSubmit\r\n    } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const inputMask = () => {\r\n\r\n        let element = document.getElementById('valor')\r\n\r\n        let valor = element.value.replace(/[^\\d]+/gi, '');\r\n        let reversedValue = valor.split('').reverse().join('')\r\n        let resultado = \"\";\r\n        let mascara = i18n.language === 'pt' ? \"##.###.###,##\".split('').reverse().join('') : \"##,###,###.##\".split('').reverse().join('');\r\n        for (let x = 0, y = 0; x < mascara.length && y < reversedValue.length;) {\r\n            if (mascara.charAt(x) !== '#') {\r\n                resultado += mascara.charAt(x);\r\n                x++;\r\n            } else {\r\n                resultado += reversedValue.charAt(y);\r\n                y++;\r\n                x++;\r\n            }\r\n        }\r\n        element.value = resultado.split('').reverse().join('');\r\n    }\r\n\r\n    let err;\r\n    if (error) {\r\n        err = JSON.parse(error)\r\n    }\r\n\r\n    const inputElements = props.inputs && props.inputs.map(inpt => {\r\n\r\n        return <div key={inpt.name} className={classes.formInputs}>\r\n            <label>{inpt.label}</label>\r\n            <div className={classes.inputContainer}>\r\n                {props.currency ? <p className={classes.inputCurrency}>{t('currency')}</p> : null}\r\n                <input\r\n                    onKeyUp={inpt.keyUp ? inputMask : null}\r\n                    id={inpt.id ? inpt.id : null}\r\n                    type={inpt.type}\r\n                    step={inpt.step ? inpt.step : null}\r\n                    min={inpt.min ? inpt.min : null}\r\n                    max={inpt.max ? inpt.max : null}\r\n                    placeholder={inpt.placeholder ? inpt.placeholder : null}\r\n                    {...register(inpt.name, {\r\n                        required: inpt.requiredMessage || null,\r\n                        minLength: inpt.minLength ? {\r\n                            ...inpt.minLength\r\n                        } : null,\r\n                        maxLength: inpt.maxLength ? {\r\n                            ...inpt.maxLength\r\n                        } : null\r\n                    })}\r\n                />\r\n            </div>\r\n\r\n            {errors[inpt.name] && (\r\n                <p className={classes.errorMessage}>{errors[inpt.name].message}</p>\r\n            )}\r\n\r\n            {err && err.title && <p className={classes.errorMessage}>{err.title}</p>}\r\n            {err && err.insufficientFunds && <p className={classes.errorMessage}>{err.insufficientFunds}</p>}\r\n\r\n        </div>\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        const headers = authHeaders(props.token, authCtx.csurfTk)\r\n        if (props.withdrawBudget) {\r\n\r\n            const valueFloat = parseFloat(data.budget)\r\n            const maxAllowed = parseFloat(props.withdrawBudget)\r\n\r\n            if (valueFloat >= maxAllowed) {\r\n                setInsufficientFunds(true)\r\n                return\r\n            }\r\n\r\n\r\n        }\r\n\r\n        let sendData;\r\n        if (data.budget) {\r\n\r\n            const normalized = i18n.language === 'pt' ? data.budget.replaceAll('.', '') : data.budget.replaceAll(',', '');\r\n            const budget = i18n.language === 'pt' ? normalized.replace(',', '.') : parseFloat(normalized)\r\n            sendData = {\r\n                budget\r\n            }\r\n        } else {\r\n            sendData = {\r\n                ...data,\r\n            }\r\n        }\r\n\r\n        try {\r\n            const httpAbortCtrl = new AbortController()\r\n            await sendRequest(props.url,\r\n                httpAbortCtrl,\r\n                props.method,\r\n                JSON.stringify(sendData),\r\n                headers\r\n                /* {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + props.token,\r\n                    'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                    credentials: 'include'\r\n                } */\r\n            )\r\n\r\n            props.afterSubmitHandler()\r\n           \r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    const cancel = (event) => {\r\n        event.preventDefault()\r\n        props.cancel()\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    const clearInsufficientFundsError = () => {\r\n        setInsufficientFunds(false)\r\n    }\r\n\r\n    return <>\r\n        <div className={classes.backDrop} onClick={cancel}></div>\r\n        <div className={classes.formContainer}>\r\n            <div className={classes.formTag}>\r\n                <p>{props.transactionType}</p>\r\n            </div>\r\n            {props.delete && <h3>{t('deleteEnvelope')}</h3>}\r\n\r\n            <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n                <div>\r\n                    {inputElements}\r\n                </div>\r\n                <div className={classes.formAction}>\r\n                    <ButtonRound type=\"submit\" className={classes.buttonOK}>{t('send')}</ButtonRound>\r\n                    <ButtonRound onClick={cancel} className={classes.buttonCancel}>{t('cancel')}</ButtonRound>\r\n                </div>\r\n            </form>\r\n\r\n            {err && err.message && <p>{err.message}</p>}\r\n            {insufficientFunds && <>\r\n                <p>{t('sourceInsufficientFunds')}</p>\r\n                <ButtonRound className={classes.buttonError} onClick={clearInsufficientFundsError}>Ok</ButtonRound>\r\n            </>}\r\n\r\n        </div>\r\n\r\n    </>\r\n\r\n}\r\n\r\nexport default EnvelopeTransactions","// extracted by mini-css-extract-plugin\nexport default {\"errorCard\":\"ErrorCard_errorCard__JwCDV\"};","import classes from './ErrorCard.module.css'\r\n\r\nconst ErrorCard = props => {\r\n    return <div className={classes.errorCard}>\r\n        {props.children}\r\n    </div>\r\n}\r\n\r\nexport default ErrorCard","// extracted by mini-css-extract-plugin\nexport default {\"genericErrorContainer\":\"GenericError_genericErrorContainer__H4PWg\",\"genericErrorAction\":\"GenericError_genericErrorAction__Oibjj\",\"backBtn\":\"GenericError_backBtn__e8Pm1\",\"homeButton\":\"GenericError_homeButton__E1GvU\"};","import classes from './GenericError.module.css';\r\nimport {useNavigate} from 'react-router-dom'\r\nimport ButtonRound from './ButtonRound';\r\nimport { useTranslation } from 'react-i18next'\r\n\r\n\r\nconst GenericError = props => {\r\n\r\n    const { t } = useTranslation()\r\n    const navigate = useNavigate()\r\n    const clearError = () => {\r\n        props.onClearError()\r\n    }\r\n    const backHome =() => {\r\n        navigate('/')\r\n    }\r\n\r\n    const errMsg = props.errMsg || t('genericError')\r\n\r\n    return <div className={classes.genericErrorContainer}>\r\n        <h1>OOPS!</h1>\r\n        <h2>{errMsg}</h2>\r\n        <div className={classes.genericErrorAction}>\r\n            <ButtonRound className={classes.backBtn} onClick={clearError}>{t('goBack')}</ButtonRound>\r\n            <ButtonRound className={classes.homeButton} onClick={backHome}>Home</ButtonRound>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default GenericError","// extracted by mini-css-extract-plugin\nexport default {\"singleEnvelopeContainer\":\"SingleEnvelope_singleEnvelopeContainer__zW+kX\",\"envelope\":\"SingleEnvelope_envelope__vg8Mr\",\"singleEnvelopeInfo\":\"SingleEnvelope_singleEnvelopeInfo__ane-c\",\"singleEnvelopeStats\":\"SingleEnvelope_singleEnvelopeStats__z17f8\",\"circleContainer\":\"SingleEnvelope_circleContainer__x0s3s\",\"singleEnvelopeActions\":\"SingleEnvelope_singleEnvelopeActions__GxKww\",\"singleEnvelopeActionBtn\":\"SingleEnvelope_singleEnvelopeActionBtn__d0G7w\",\"circle\":\"SingleEnvelope_circle__Fxn85\",\"percentage\":\"SingleEnvelope_percentage__R6TJ7\",\"inner\":\"SingleEnvelope_inner__v5Nqt\"};","import { useContext, useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { AuthContext } from '../../shared/context/auth-context'\r\nimport { useHttpClient } from '../../shared/hooks/http-hook'\r\nimport classes from './SingleEnvelope.module.css'\r\nimport { url } from '../../utils/urls/urls'\r\nimport EnvelopeTransactions from '../../components/transfer/EnvelopeTransactions'\r\nimport LoaderSpinner from '../../components/ui/LoaderSpinner'\r\nimport ButtonRound from '../../components/ui/ButtonRound'\r\nimport ErrorCard from '../../components/ui/ErrorCard'\r\nimport GenericError from '../../components/ui/GenericError'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { currencyMask } from '../../utils/i18n/currencyMask'\r\n\r\nconst UpdateEnvelope = (props) => {\r\n\r\n    const { t, i18n } = useTranslation()\r\n\r\n    const authCtx = useContext(AuthContext)\r\n    const envelopeId = useParams().envelopeId\r\n    const [envelope, setEnvelope] = useState()\r\n    const [totalBudget, setTotalBudget] = useState(0.00)\r\n    const [budgetPercentage, setBudgetPercentage] = useState(0.00)\r\n    const [updateTitle, setUpdateTitle] = useState()\r\n    const [deposit, setDeposit] = useState()\r\n    const [withdraw, setWithdraw] = useState()\r\n\r\n    const navigate = useNavigate()\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n\r\n    useEffect(() => {\r\n        const httpAbortCtrl = new AbortController()\r\n        try {\r\n            const fetchEnvelopeById = async () => {\r\n\r\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `/envelopes/${envelopeId}`, httpAbortCtrl, 'GET', null, {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + authCtx.token\r\n                })\r\n\r\n                const checkTotalBudget = responseData.totalBudget.total_budget ? responseData.totalBudget.total_budget: 0.00\r\n                const totalBudgetFloat = parseFloat(checkTotalBudget)\r\n\r\n                const envelopeBudget = parseFloat(responseData.envelopes.budget)\r\n\r\n                if (totalBudgetFloat > 0) {\r\n                    const percentage = (envelopeBudget / totalBudgetFloat) * 100\r\n                    const round = +(percentage).toPrecision(2)\r\n                    setBudgetPercentage(round)\r\n\r\n                }\r\n\r\n                setEnvelope(responseData.envelopes)\r\n                setTotalBudget(totalBudgetFloat)\r\n            }\r\n\r\n            fetchEnvelopeById()\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n    }, [sendRequest, authCtx.token, envelopeId])\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    const onClearErrorHandler = () => {\r\n        clearError()\r\n        navigate(`/${url.envelopes}/${url.userEnvelopes}`)\r\n    }\r\n\r\n    let err;\r\n\r\n    if (error) {\r\n\r\n        err = JSON.parse(error)\r\n\r\n        if (err.invalidId) {\r\n            return <>\r\n                <ErrorCard>\r\n                    <h1>{err.invalidId}</h1>\r\n                    <ButtonRound onClick={onClearErrorHandler}>OK</ButtonRound>\r\n                </ErrorCard>\r\n            </>\r\n        }\r\n\r\n        if (err.serverMessage) {\r\n            return <GenericError errMsg={err.serverMessage} onClearError={clearError} />\r\n        }\r\n    }\r\n\r\n    const openDeposit = () => {\r\n        setUpdateTitle(false)\r\n        setWithdraw(false)\r\n        setDeposit(true)\r\n    }\r\n\r\n    const cancelDeposit = () => {\r\n        setDeposit(false)\r\n    }\r\n\r\n    const openUpdateTitle = () => {\r\n        setDeposit(false)\r\n        setWithdraw(false)\r\n        setUpdateTitle(true)\r\n    }\r\n\r\n    const cancelUpdateTitle = () => {\r\n        setUpdateTitle(false)\r\n\r\n    }\r\n\r\n    const onUpdateEnvelope = () => {\r\n        navigate(`/${url.envelopes}/${url.userEnvelopes}`)\r\n    }\r\n\r\n    const backToAllEnvelopes = () => {\r\n        navigate(`/${url.envelopes}/${url.userEnvelopes}`)\r\n    }\r\n\r\n    const openWithdraw = () => {\r\n        setUpdateTitle(false)\r\n        setDeposit(false)\r\n        setWithdraw(true)\r\n    }\r\n\r\n    const cancelWithdraw = () => {\r\n        setWithdraw(false)\r\n    }\r\n\r\n    const updateTitleInputs = [\r\n        {\r\n            label: t('title'),\r\n            type: 'text',\r\n            placeholder: t('title'),\r\n            name: 'title',\r\n            requiredMessage: t('fieldNotEmpty'),\r\n            minLength: {\r\n                value: 2,\r\n                message: t('titleFieldMaxMin')\r\n            },\r\n            maxLength: {\r\n                value: 25,\r\n                message: t('titleFieldMaxMin')\r\n            },\r\n        },\r\n\r\n    ]\r\n\r\n    const DepositInputs = [\r\n        {\r\n            label: t('amount'),\r\n            type: 'text',\r\n            step: 0.01,\r\n            placeholder: t('howMuch'),\r\n            name: 'budget',\r\n            requiredMessage: t('fieldNotEmpty'),\r\n            min: 0.01,\r\n            keyUp: true,\r\n            id: 'valor'\r\n        },\r\n\r\n    ]\r\n\r\n    if (!isLoading && envelope) {\r\n        const WithdrawInputs = [\r\n            {\r\n                label: t('amount'),\r\n                type: 'text',\r\n                placeholder: t('howMuch'),\r\n                name: 'budget',\r\n                requiredMessage: t('fieldNotEmpty'),\r\n                max: envelope.budget,\r\n                id: 'valor',\r\n                keyUp: true,\r\n\r\n            },\r\n        ]\r\n\r\n        let envelopeBudgetCurrency = currencyMask(envelope.budget, i18n.language)\r\n        let totalBudgetCurrency = currencyMask(totalBudget, i18n.language)\r\n\r\n        return <>\r\n            <div className={classes.singleEnvelopeContainer}>\r\n\r\n                {deposit && <EnvelopeTransactions\r\n                    transactionType={t('deposit')}\r\n                    method={'POST'}\r\n                    currency={true}\r\n                    inputs={DepositInputs}\r\n                    token={authCtx.token}\r\n                    url={process.env.REACT_APP_BACKEND_URL + `/transactions/${envelope.env_id}/deposit`}\r\n                    cancel={cancelDeposit}\r\n                    afterSubmitHandler={onUpdateEnvelope}\r\n\r\n                />}\r\n                {withdraw && <EnvelopeTransactions\r\n                    transactionType={t('withdraw')}\r\n                    method={'POST'}\r\n                    currency={true}\r\n                    inputs={WithdrawInputs}\r\n                    token={authCtx.token}\r\n                    url={process.env.REACT_APP_BACKEND_URL + `/transactions/${envelope.env_id}/withdraw`}\r\n                    cancel={cancelWithdraw}\r\n                    afterSubmitHandler={onUpdateEnvelope}\r\n                    withdrawBudget={envelope.budget}\r\n                />}\r\n                {updateTitle && <EnvelopeTransactions\r\n                    transactionType={t('update')}\r\n                    method={'PUT'}\r\n                    inputs={updateTitleInputs}\r\n                    token={authCtx.token}\r\n                    url={process.env.REACT_APP_BACKEND_URL + `/envelopes/${envelope.env_id}`}\r\n                    cancel={cancelUpdateTitle}\r\n                    afterSubmitHandler={onUpdateEnvelope}\r\n\r\n                />}\r\n                <div className={classes.singleEnvelopeInfo}>\r\n                    <div>\r\n                        <h1>{envelope.title}</h1>\r\n                    </div>\r\n                    <div className={classes.singleEnvelopeStats}>\r\n                        <div className={classes.circleContainer}>\r\n\r\n                            <div className={`${classes.circle}`} style={{ backgroundImage: `conic-gradient(#302d2e ${budgetPercentage}%, #cbc3bf 0)` }}>\r\n                                <div className={classes.inner}>{budgetPercentage}%</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                <h2>{envelopeBudgetCurrency}</h2>\r\n                                <p>{t('budget')}</p>\r\n                            </div>\r\n                            <div>\r\n                                <h2>{totalBudgetCurrency}</h2>\r\n                                <p>{t('totalBudget')}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className={classes.singleEnvelopeActions}>\r\n                    <ButtonRound className={classes.singleEnvelopeActionBtn} onClick={openDeposit}>{t('deposit')}</ButtonRound>\r\n                    <ButtonRound className={classes.singleEnvelopeActionBtn} onClick={openWithdraw}>{t('withdraw')}</ButtonRound>\r\n                    <ButtonRound className={classes.singleEnvelopeActionBtn} onClick={openUpdateTitle}>{`${t('update')} ${t('title')}`}</ButtonRound>\r\n\r\n                    <ButtonRound className={classes.singleEnvelopeActionBtn} onClick={backToAllEnvelopes}>{t('myEnvelopes')}</ButtonRound>\r\n\r\n                </div>\r\n\r\n                <div className={classes.envelope}>\r\n                    <NavLink as={NavLink} to={`/${url.envelopes}/${url.transfer}/${envelope.env_id}`}>{t('transferToAnother')}</NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    }\r\n\r\n}\r\n\r\nexport default UpdateEnvelope","export const currencyMask = (data, lng) => {\r\n   \r\n    let currency;\r\n    if(lng === 'pt') {\r\n        currency = Intl.NumberFormat('pt-BR', {\r\n            style: 'currency',\r\n            currency: 'BRL',\r\n            minimumFractionDigits: 2\r\n        })\r\n    } else {\r\n        currency = Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 2           \r\n        })\r\n    }\r\n\r\n    const localCurrency = currency.format(data)\r\n    \r\n    return localCurrency\r\n}"],"names":["props","err","authCtx","useContext","AuthContext","useTranslation","t","i18n","useHttpClient","isLoading","error","sendRequest","useState","insufficientFunds","setInsufficientFunds","useForm","mode","register","errors","formState","handleSubmit","inputMask","element","document","getElementById","reversedValue","value","replace","split","reverse","join","resultado","mascara","language","x","y","length","charAt","JSON","parse","inputElements","inputs","map","inpt","className","classes","label","currency","onKeyUp","keyUp","id","type","step","min","max","placeholder","name","required","requiredMessage","minLength","maxLength","message","title","onSubmit","data","headers","authHeaders","token","csurfTk","withdrawBudget","valueFloat","parseFloat","budget","maxAllowed","normalized","replaceAll","sendData","httpAbortCtrl","AbortController","url","method","stringify","afterSubmitHandler","cancel","event","preventDefault","LoaderSpinner","onClick","transactionType","delete","ButtonRound","children","navigate","useNavigate","errMsg","onClearError","envelopeId","useParams","envelope","setEnvelope","totalBudget","setTotalBudget","budgetPercentage","setBudgetPercentage","updateTitle","setUpdateTitle","deposit","setDeposit","withdraw","setWithdraw","clearError","useEffect","fetchEnvelopeById","process","Authorization","responseData","checkTotalBudget","total_budget","totalBudgetFloat","envelopeBudget","envelopes","round","toPrecision","invalidId","ErrorCard","serverMessage","GenericError","onUpdateEnvelope","updateTitleInputs","DepositInputs","WithdrawInputs","envelopeBudgetCurrency","currencyMask","totalBudgetCurrency","EnvelopeTransactions","env_id","style","backgroundImage","as","NavLink","to","lng","Intl","NumberFormat","minimumFractionDigits","format"],"sourceRoot":""}