{"version":3,"file":"static/js/808.2e884910.chunk.js","mappings":"8NACA,EAAqC,gDAArC,EAAqG,2CAArG,EAA+J,0CAA/J,EAAsN,wCAAtN,EAA8Q,2C,6GC+F9Q,EApFoB,WAChB,IA+CIA,EA/CEC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GACnBC,GAAMC,EAAAA,EAAAA,KAAND,EACR,GAAuBE,EAAAA,EAAAA,MACjBC,GADN,eACiCC,IAAI,eACrC,GAAsDC,EAAAA,EAAAA,KAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,GAIIC,EAAAA,EAAAA,IAAQ,CACRC,KAAM,aAJNC,EADJ,EACIA,SACaC,EAFjB,EAEIC,UAAaD,OACbE,EAHJ,EAGIA,aAKEC,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,yCAAG,WAAOC,GAAP,2FACPC,GAAUC,EAAAA,EAAAA,GAAY,KAAMxB,EAAQyB,SAC1Cb,IACMc,EAAgB,IAAIC,gBAHb,SAKHC,EAAW,CACbC,WAAYP,EAAKO,YAEfC,EAA6B,eAAhBxB,EAA+ByB,+EAAuEA,sEARhH,SASHpB,EAAYmB,EACdJ,EACA,OACAM,KAAKC,UAAUL,GACfL,GAbK,OAqBHW,EAA8B,eAAhB5B,EAAA,WAAmC6B,EAAAA,EAAAA,MAAnC,YAAgDA,EAAAA,EAAAA,UAAhD,uCAA8FA,EAAAA,EAAAA,MAA9F,YAA2GA,EAAAA,EAAAA,UAA3G,0BACpBhB,EAASe,GAtBA,4GAAH,sDA4Bd,OAAIzB,GACO,SAAC2B,EAAA,EAAD,KAIP1B,IACAX,EAAMiC,KAAKK,MAAM3B,KAGd,iBAAK4B,UAAWC,EAAhB,UACc,eAAhBjC,IAAgC,wBAAKH,EAAE,2BACvB,aAAhBG,IAA8B,wBAAKH,EAAE,kBACtC,kBAAMmC,UAAWC,EAAuBlB,SAAUH,EAAaG,GAA/D,WAEI,kBAAOmB,QAAQ,aAAf,oBACA,0BACIC,YAAY,QACZC,KAAK,QACD3B,EAAS,aAAc,CACvB4B,SAASxC,EAAE,iBACXyC,QAAS,CACLC,MAAO,8CACPC,QAAS3C,EAAE,wBAItBa,EAAOa,aAAc,cAAGS,UAAWC,EAAd,SAAqCvB,EAAOa,WAAWiB,UAC5E/C,GAAOA,EAAI8B,aAAc,cAAGS,UAAWC,EAAd,SAAqCxC,EAAI8B,aAClE9B,GAAOA,EAAIgD,eAAgB,cAAGT,UAAWC,EAAd,SAAqCxC,EAAIgD,gBAErE,gBAAKT,UAAWC,EAAhB,UACA,SAACS,EAAA,EAAD,CAAaV,UAAWC,EAAuBG,KAAK,SAApD,SAA8DvC,EAAE,eAInEJ,GAAOA,EAAIkD,gBAAiB,cAAGX,UAAWC,EAAd,SAAqCxC,EAAIkD","sources":["webpack://envelope-frontend/./src/users/pages/auth/ResetAndResendEmail.module.css?3f18","users/pages/auth/ResendEmail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sendEmailContainer\":\"ResetAndResendEmail_sendEmailContainer__gTf5I\",\"sendEmailForm\":\"ResetAndResendEmail_sendEmailForm__BTDeU\",\"errorMessage\":\"ResetAndResendEmail_errorMessage__MbsUx\",\"formAction\":\"ResetAndResendEmail_formAction__3u-wH\",\"formActionBtn\":\"ResetAndResendEmail_formActionBtn__BEF5y\"};","import { useForm } from 'react-hook-form'\r\nimport classes from './ResetAndResendEmail.module.css'\r\nimport { useHttpClient } from '../../../shared/hooks/http-hook'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate, useSearchParams } from 'react-router-dom'\r\nimport { url } from '../../../utils/urls/urls'\r\nimport LoaderSpinner from '../../../components/ui/LoaderSpinner'\r\nimport ButtonRound from '../../../components/ui/ButtonRound'\r\nimport { useContext } from 'react'\r\nimport { AuthContext } from '../../../shared/context/auth-context'\r\nimport { authHeaders } from '../../../utils/headers/authHeader'\r\n\r\nconst ResendEmail = () => {\r\n    const authCtx = useContext(AuthContext)\r\n    const { t } = useTranslation()\r\n    const [searchParams] = useSearchParams()\r\n    const requestType = searchParams.get('requestType');\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n    const {\r\n        register,\r\n        formState: { errors },        \r\n        handleSubmit\r\n    } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onSubmit = async (data) => {\r\n        const headers = authHeaders(null, authCtx.csurfTk)\r\n        clearError()\r\n        const httpAbortCtrl = new AbortController()\r\n        try {\r\n            const userData = {\r\n                user_email: data.user_email\r\n            }\r\n            const requesturl = requestType === 'activation' ? process.env.REACT_APP_BACKEND_URL + '/users/resend-activation-email' : process.env.REACT_APP_BACKEND_URL + '/users/password-reset'\r\n            await sendRequest(requesturl,\r\n                httpAbortCtrl,\r\n                'POST',\r\n                JSON.stringify(userData),\r\n                headers\r\n                /* {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                    credentials: 'include'\r\n                } */\r\n            )\r\n\r\n            const redirectUrl = requestType === 'activation' ? `/${url.users}/${url.emailSent}/?requestType=activation` : `/${url.users}/${url.emailSent}/?requestType=password`\r\n            navigate(redirectUrl)            \r\n        } catch (error) {\r\n\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    let err;\r\n    if (error) {\r\n        err = JSON.parse(error)\r\n    }\r\n\r\n    return <div className={classes.sendEmailContainer}>\r\n        {requestType === 'activation' && <h1>{t('resendActivationEmail')}</h1>}\r\n        {requestType === 'password' && <h1>{t('recoverPass')}</h1>}\r\n        <form className={classes.sendEmailForm} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <label htmlFor=\"user_email\">Email</label>\r\n            <input\r\n                placeholder=\"Email\"\r\n                type=\"text\"\r\n                {...register(\"user_email\", {\r\n                    required:t('fieldNotEmpty'),\r\n                    pattern: {\r\n                        value: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                        message: t('validEmailField')\r\n                    }\r\n                })}\r\n            />\r\n            {errors.user_email && <p className={classes.errorMessage}>{errors.user_email.message}</p>}\r\n            {err && err.user_email && <p className={classes.errorMessage}>{err.user_email}</p>}\r\n            {err && err.invalidEmail && <p className={classes.errorMessage}>{err.invalidEmail}</p>}\r\n\r\n            <div className={classes.formAction}>\r\n            <ButtonRound className={classes.formActionBtn} type=\"submit\">{t('send')}</ButtonRound>\r\n            </div>           \r\n\r\n        </form>\r\n        {err && err.serverMessage && <p className={classes.errorMessage}>{err.serverMessage}</p>}\r\n\r\n    </div>\r\n}\r\n\r\nexport default ResendEmail"],"names":["err","authCtx","useContext","AuthContext","t","useTranslation","useSearchParams","requestType","get","useHttpClient","isLoading","error","sendRequest","clearError","useForm","mode","register","errors","formState","handleSubmit","navigate","useNavigate","onSubmit","data","headers","authHeaders","csurfTk","httpAbortCtrl","AbortController","userData","user_email","requesturl","process","JSON","stringify","redirectUrl","url","LoaderSpinner","parse","className","classes","htmlFor","placeholder","type","required","pattern","value","message","invalidEmail","ButtonRound","serverMessage"],"sourceRoot":""}