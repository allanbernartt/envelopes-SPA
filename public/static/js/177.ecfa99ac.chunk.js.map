{"version":3,"file":"static/js/177.ecfa99ac.chunk.js","mappings":"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","sources":["webpack://envelope-frontend/./src/users/pages/auth/AuthPage.module.css?4a32","users/pages/auth/AuthPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authContainer\":\"AuthPage_authContainer__PUd1P\",\"loginFormContainer\":\"AuthPage_loginFormContainer__zRL7E\",\"loginFormTitle\":\"AuthPage_loginFormTitle__pmF5b\",\"loginFormInputs\":\"AuthPage_loginFormInputs__yQK+Q\",\"loginFormAction\":\"AuthPage_loginFormAction__Ygy4I\",\"forgotPassword\":\"AuthPage_forgotPassword__9ZmKa\",\"btnSubmit\":\"AuthPage_btnSubmit__H72k-\",\"btnSwitch\":\"AuthPage_btnSwitch__nDzpz\",\"errorMessage\":\"AuthPage_errorMessage__LNiwD\",\"serverError\":\"AuthPage_serverError__9oNpJ\",\"sessionExpiration\":\"AuthPage_sessionExpiration__Nslkf\"};","import { useContext, useState } from 'react';\r\nimport { useForm } from 'react-hook-form'\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport classes from './AuthPage.module.css'\r\nimport { useHttpClient } from '../../../shared/hooks/http-hook'\r\nimport ButtonRound from '../../../components/ui/ButtonRound';\r\nimport { AuthContext } from '../../../shared/context/auth-context';\r\nimport { url } from '../../../utils/urls/urls'\r\nimport LoaderSpinner from '../../../components/ui/LoaderSpinner';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { authHeaders } from '../../../utils/headers/authHeader';\r\n\r\nconst AuthPage = () => {\r\n\r\n    const { t } = useTranslation()\r\n    const authCtx = useContext(AuthContext)\r\n\r\n    const [isLoginMode, setIsLoginMode] = useState(true)\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        getValues,\r\n        handleSubmit\r\n    } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onSubmit = async (data) => {\r\n\r\n        const headers = authHeaders(null, authCtx.csurfTk)\r\n        const httpAbortCtrl = new AbortController()\r\n        if (isLoginMode) {\r\n\r\n            try {\r\n                const userData = {\r\n                    user_email: data.user_email,\r\n                    password: data.password\r\n                }\r\n\r\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users/login',\r\n                    httpAbortCtrl,\r\n                    'POST',\r\n                    JSON.stringify(userData),\r\n                    headers\r\n                    /* {\r\n                        'Content-Type': 'application/json',\r\n                        'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                        credentials: 'include'\r\n                    } */\r\n                )\r\n\r\n                authCtx.login(responseData.userId, responseData.token)\r\n\r\n            } catch (error) {\r\n\r\n            }\r\n\r\n        } else {\r\n            try {\r\n                const userData = {\r\n                    user_name: data.user_name,\r\n                    user_email: data.user_email,\r\n                    password: data.password,\r\n                    passConfirmation: data.passConfirmation\r\n                }\r\n                await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users/register',\r\n                    httpAbortCtrl,\r\n                    'POST',\r\n                    JSON.stringify(userData),\r\n                    headers\r\n                    /* {\r\n                        'Content-Type': 'application/json',\r\n                        'X-CSRF-TOKEN': authCtx.csurfTk,\r\n                        credentials: 'include'\r\n                    } */\r\n                )\r\n\r\n                navigate(`/${url.users}/${url.emailSent}?requestType=activation`)\r\n\r\n            } catch (err) { }\r\n\r\n        }\r\n    };\r\n\r\n    const switchAuthModeHandler = (event) => {\r\n        event.preventDefault()\r\n        setIsLoginMode(prev => !prev)\r\n        clearError()\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <LoaderSpinner />\r\n    }\r\n\r\n    let err;\r\n    if (error) {\r\n        err = JSON.parse(error)\r\n\r\n\r\n    }\r\n    return <div className={classes.authContainer}>\r\n        {authCtx.sessionExpiration && <div className={classes.sessionExpiration}><p>{t('sessionExpiration')}</p></div>}\r\n        <div className={classes.loginFormContainer}>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className={classes.loginFormTitle}>\r\n                    <h1>{isLoginMode ? t('loginTag') : t('createAccount')}</h1>\r\n                </div>\r\n                <div className={classes.loginFormInputs}>\r\n\r\n                    {!isLoginMode && <>\r\n                        <input\r\n                            placeholder={t('name')}\r\n                            {...register(\"user_name\", {\r\n                                required: t('fieldNotEmpty'),\r\n                                minLength: {\r\n                                    value: 3,\r\n                                    message: t('nameFieldMaxMin')\r\n                                },\r\n                                maxLength: {\r\n                                    value: 25,\r\n                                    message: t('nameFieldMaxMin')\r\n                                }\r\n                            })}\r\n                        />\r\n                        {errors.user_name && <p className={classes.errorMessage}>{errors.user_name.message}</p>}\r\n                        {err && err.user_name && <p className={classes.errorMessage}>{err.user_name}</p>}\r\n                    </>}\r\n\r\n                    <input\r\n                        placeholder=\"Email\"\r\n                        type=\"text\"\r\n                        {...register(\"user_email\", {\r\n                            required: t('fieldNotEmpty'),\r\n                            pattern: {\r\n                                value: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                                message: t('validEmailField')\r\n                            }\r\n                        })}\r\n                    />\r\n                    {errors.user_email && <p className={classes.errorMessage}>{errors.user_email.message}</p>}\r\n                    {err && err.user_email && <p className={classes.errorMessage}>{err.user_email}</p>}\r\n                    <input\r\n                        placeholder={t('password')}\r\n                        type=\"password\"\r\n                        {...register(\"password\", {\r\n                            required: t('fieldNotEmpty'),\r\n                            minLength: {\r\n                                value: 8,\r\n                                message: t('passFieldMaxMin')\r\n                            },\r\n                            maxLength: {\r\n                                value: 25,\r\n                                message: t('passFieldMaxMin')\r\n                            },\r\n                        })}\r\n                    />\r\n                    {errors.password && (\r\n                        <p className={classes.errorMessage}>{errors.password.message}</p>\r\n                    )}\r\n                    {err && err.password && <p className={classes.errorMessage}>{err.password}</p>}\r\n\r\n                    {!isLoginMode && <>\r\n                        <input\r\n                            placeholder={t('confirmPass')}\r\n                            type=\"password\"\r\n                            {...register(\"passConfirmation\", {\r\n                                required: t('fieldNotEmpty'),\r\n                                validate: {\r\n                                    matchesPreviousPassword: (value) => {\r\n                                        const { password } = getValues();\r\n                                        return password === value || t('passMatchField');\r\n                                    }\r\n                                }\r\n                            })}\r\n                        />\r\n                        {errors.passConfirmation && (\r\n                            <p className={classes.errorMessage}>\r\n                                {errors.passConfirmation.message}\r\n                            </p>\r\n                        )}\r\n                        {err && err.passConfirmation && <p className={classes.errorMessage}>{err.passConfirmation}</p>}\r\n                    </>\r\n                    }\r\n                </div>\r\n                {err && err.serverMessage && <div className={classes.serverError}>\r\n                    <p>{err.serverMessage}</p>\r\n                </div>}\r\n                {err && err.emailErrorMessage && <div className={classes.serverError}>\r\n                    (\r\n                    <>\r\n                        <p>{err.emailErrorMessage}</p>\r\n\r\n                        <NavLink to={`/${url.users}/${url.account}/${url.sendEmail}?requestType=activation`}>{t('resendActivationEmail')}</NavLink>\r\n\r\n                    </>\r\n                    )\r\n                </div>}\r\n\r\n                <div className={classes.forgotPassword}>\r\n                    {isLoginMode && <NavLink to={`/${url.users}/${url.account}/${url.sendEmail}?requestType=password`}>{t('forgotPass')}</NavLink>}\r\n                </div>\r\n\r\n                <div className={classes.loginFormAction}>\r\n                    <ButtonRound className={classes.btnSubmit}>{isLoginMode ? 'LOGIN' : t('btnRegister')}</ButtonRound>\r\n                    <ButtonRound className={classes.btnSwitch} onClick={switchAuthModeHandler}>{t('switchTo')} {isLoginMode ? t('createAccount') : 'Login'}</ButtonRound>\r\n                </div>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default AuthPage"],"names":["err","t","useTranslation","authCtx","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","mode","register","errors","formState","getValues","handleSubmit","navigate","useNavigate","onSubmit","data","headers","authHeaders","csurfTk","httpAbortCtrl","AbortController","userData","user_email","password","process","JSON","stringify","responseData","login","userId","token","user_name","passConfirmation","url","LoaderSpinner","parse","className","classes","sessionExpiration","placeholder","required","minLength","value","message","maxLength","type","pattern","validate","matchesPreviousPassword","serverMessage","emailErrorMessage","to","ButtonRound","onClick","event","preventDefault","prev"],"sourceRoot":""}